import {
  Injectable,
  NotFoundException,
  BadRequestException,
} from '@nestjs/common';
import { PrismaService } from 'src/prisma/prisma.service';
import { CreateApplicationDto } from './dto/create-application.dto';
import { NotificationGateway } from '../notification/notification.gateway';
import { WorkStatus } from '@prisma/client';

@Injectable()
export class ApplicationService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly notificationGateway: NotificationGateway,
  ) {}

  async findAll() {
    return this.prisma.application.findMany({
      include: {
        services: true,
        user: true,
        car: true,
        assignedEmployee: true, // üî• –¥–æ–±–∞–≤—å —ç—Ç–æ!
      },
    });
  }
  

  async isSlotAvailable(startDate: Date, endDate: Date): Promise<boolean> {
    const applications = await this.prisma.application.findMany({
      where: {
        status: 'approved', // ‚úÖ —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        OR: [
          { startDate: { gte: startDate, lt: endDate } },
          { endDate: { gt: startDate, lte: endDate } },
          { startDate: { lte: startDate }, endDate: { gte: endDate } }, // –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        ],
      },
    });

    return applications.length === 0;
  }

  async create(dto: CreateApplicationDto) {
    const {
      userId,
      carBrand,
      carModel,
      year,
      description,
      serviceIds,
      date,
      rememberCar,
    } = dto;
  
    const user = await this.prisma.user.findUnique({ where: { id: userId } });
    if (!user) throw new NotFoundException(`User with ID ${userId} not found`);
  
    // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å, –Ω–æ –∏ –≥–æ–¥
    let car = await this.prisma.car.findFirst({
      where: {
        brand: carBrand,
        model: carModel,
        year: year ?? new Date().getFullYear(), // ‚úÖ —É—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–¥
        ownerId: userId,
        isDeleted: false, // üí° –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      },
    });
  
    // –ï—Å–ª–∏ –∞–≤—Ç–æ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º
    if (!car) {
      car = await this.prisma.car.create({
        data: {
          brand: carBrand,
          model: carModel,
          year: year ?? new Date().getFullYear(),
          ownerId: userId,
          remembered: rememberCar ?? false, // ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ true
        },
      });
    }
  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª—É–≥
    const services = await this.prisma.service.findMany({
      where: { id: { in: serviceIds } },
    });
  
    if (services.length !== serviceIds.length) {
      throw new NotFoundException('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  
    const totalDuration = services.reduce((sum, s) => sum + (s.duration || 0), 0);
    const startDate = new Date(date);
    const endDate = new Date(startDate.getTime() + totalDuration * 60 * 1000);
  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–∞
    const isAvailable = await this.isSlotAvailable(startDate, endDate);
    if (!isAvailable) {
      throw new BadRequestException('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ');
    }
  
    const application = await this.prisma.application.create({
      data: {
        userId,
        carId: car.id,
        description,
        status: 'pending',
        startDate,
        endDate,
        services: {
          connect: serviceIds.map((id) => ({ id })),
        },
      },
      include: {
        services: true,
        user: true,
        car: true,
      },
    });
  
    await this.notificationGateway.sendApplicationStatusUpdate(
      application.id,
      application.status,
    );
  
    return application;
  }
  

  async updateStatus(id: number, status: string, employeeId?: number) {
    const validManagerStatuses = ['pending', 'approved', 'rejected'];
    const validWorkStatuses = ['WAITING', 'IN_PROGRESS', 'CHECK', 'READY'];
  
    const application = await this.prisma.application.findUnique({
      where: { id },
    });
  
    if (!application) {
      throw new NotFoundException(`Application with ID ${id} not found`);
    }
  
    // –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    if (validManagerStatuses.includes(status)) {
      const updated = await this.prisma.application.update({
        where: { id },
        data: {
          status,
          assignedEmployeeId: employeeId ?? undefined,
        },
        include: {
          services: true,
          user: true,
          car: true,
        },
      });
  
      await this.notificationGateway.sendApplicationStatusUpdate(
        updated.id,
        updated.status,
      );
  
      return updated;
    }
  
    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å
    if (validWorkStatuses.includes(status)) {
      return this.prisma.application.update({
        where: { id },
        data: {
          workStatus: status as WorkStatus,
        },
      });
    }
    
  
    throw new BadRequestException('Invalid status provided');
  }
  
  

  async assignEmployee(applicationId: number, employeeId: number) {
    const employee = await this.prisma.user.findFirst({
      where: {
        id: employeeId,
        role: 'SERVICE_EMPLOYEE',
      },
    });
  
    if (!employee) {
      throw new NotFoundException('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–Ω—ã–º –º–∞—Å—Ç–µ—Ä–æ–º');
    }
  
    const application = await this.prisma.application.update({
      where: { id: applicationId },
      data: {
        assignedEmployeeId: employeeId,
      },
      include: {
        user: true,
        car: true,
        services: true,
      },
    });
  
    return application;
  }
  
  async updateWorkStatus(applicationId: number, workStatus: 'WAITING' | 'IN_PROGRESS' | 'CHECK' | 'READY') {
    return this.prisma.application.update({
      where: { id: applicationId },
      data: { workStatus },
    });
  }

  async getApplicationsForEmployee(employeeId: number) {
    return this.prisma.application.findMany({
      where: { assignedEmployeeId: employeeId },
      include: {
        user: true,
        car: true,
        services: true,
      },
      orderBy: {
        startDate: 'asc',
      },
    });
    
  }

  async getByEmployee(employeeId: number) {
  return this.prisma.application.findMany({
    where: {
      assignedEmployeeId: employeeId,
    },
    include: {
      car: true,
      services: true,
    },
    orderBy: { createdAt: 'desc' },
  });
}


  
}
