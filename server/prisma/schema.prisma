generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  CLIENT
  SERVICE_EMPLOYEE
}

enum WorkStatus {
  WAITING
  IN_PROGRESS
  CHECK
  READY
}

model User {
  id                      Int           @id @default(autoincrement())
  email                   String        @unique
  password                String
  name                    String?
  phone                   String?
  CreatedAt               DateTime      @default(now())
  role                    Role          @default(CLIENT)

  cars                    Car[]
  applications            Application[]            @relation("UserApplications")
  assignedApplications    Application[]            @relation("EmployeeApplications")
  sentMessages     ChatMessage[] @relation("SentMessages")
  receivedMessages ChatMessage[] @relation("ReceivedMessages")

  @@map("users")
}

model Car {
  id           Int           @id @default(autoincrement())
  brand        String
  model        String
  year         Int
  ownerId      Int
  isDeleted    Boolean       @default(false)
  remembered   Boolean       @default(false)
  createdAt    DateTime      @default(now())

  applications Application[]
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("cars")
}

model Application {
  id                  Int           @id @default(autoincrement())
  userId              Int
  carId               Int
  description         String
  status              String        @default("pending")
  workStatus          WorkStatus?   // üëà –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  startDate           DateTime
  endDate             DateTime

  assignedEmployeeId  Int?          // üëà –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
  assignedEmployee    User?         @relation("EmployeeApplications", fields: [assignedEmployeeId], references: [id])
  user                User          @relation("UserApplications", fields: [userId], references: [id])
  car                 Car           @relation(fields: [carId], references: [id])

  chatMessages ChatMessage[]
  services            Service[]
  applicationServices ApplicationService[]

  @@map("applications")
}

model Service {
  id                  Int                  @id @default(autoincrement())
  title               String
  description         String
  price               Int
  duration            Int

  applications        Application[]
  applicationServices ApplicationService[]

  @@map("services")
}

model ApplicationService {
  applicationId Int
  serviceId     Int

  application Application @relation(fields: [applicationId], references: [id])
  service     Service     @relation(fields: [serviceId], references: [id])

  @@id([applicationId, serviceId])
  @@map("application_services")
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  text       String
  createdAt  DateTime @default(now())
  applicationId  Int

  application    Application @relation(fields: [applicationId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}