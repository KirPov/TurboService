import { Navigate, useLocation } from "react-router-dom";
import { useAppSelector } from "../store/hooks";
import { UserRole } from "../types/types";

interface ProtectedRouteProps {
  children: React.ReactNode;
  allowedRoles: UserRole[];
}

export const ProtectedRoute = ({
  children,
  allowedRoles,
}: ProtectedRouteProps) => {
  const { isAuth, user, isLoading } = useAppSelector((state) => state.user);
  const location = useLocation();
  console.log(user);

  // ‚è≥ –ü–æ–∫–∞ –≥—Ä—É–∑–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>; // –ú–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ø–∏–Ω–Ω–µ—Ä
  }

  // ‚ùå –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!isAuth) {
    return <Navigate to="/auth" state={{ from: location }} replace />;
  }

  // üö´ –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
  if (!user || !allowedRoles.includes(user.role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  // ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
  return <>{children}</>;
};
